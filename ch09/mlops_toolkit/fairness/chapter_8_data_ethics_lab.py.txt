import pandas as pd
import numpy as np
from sklearn.linear_model import LogisticRegression
import shap

# Generate mock dataset
n = 1000
X = pd.DataFrame({
    'Age': np.random.randint(18, 90, size=n),
    'SocioEconomicClass_Upper': np.random.choice([0, 1], size=n, p=[0.7, 0.3]),
    'SocioEconomicClass_Middle': np.random.choice([0, 1], size=n, p=[0.4, 0.6]),
    'SocioEconomicClass_Lower': np.random.choice([0, 1], size=n, p=[0.2, 0.8]),
})
y = np.random.choice([0, 1], size=n, p=[0.6, 0.4])

# Split into train and test sets
split_ratio = 0.7
split_index = int(n * split_ratio)
X_train, X_test = X.iloc[:split_index], X.iloc[split_index:]
y_train, y_test = y[:split_index], y[split_index:]

# Train logistic regression model
model = LogisticRegression(random_state=42)
model.fit(X_train, y_train)

# Calculate SHAP values for test set
explainer = shap.LinearExplainer(model, X_train)
shap_values = explainer.shap_values(X_test)

# Calculate demographic parity by socioeconomic class
upper_class_shap_values = shap_values[X_test['SocioEconomicClass_Upper'] == 1]
middle_class_shap_values = shap_values[X_test['SocioEconomicClass_Middle'] == 1]
lower_class_shap_values = shap_values[X_test['SocioEconomicClass_Lower'] == 1]

# Calculate mean absolute SHAP values for each class
upper_class_mean_shap = np.mean(np.abs(upper_class_shap_values))
middle_class_mean_shap = np.mean(np.abs(middle_class_shap_values))
lower_class_mean_shap = np.mean(np.abs(lower_class_shap_values))

# Calculate demographic parity difference
dp_diff = np.abs(upper_class_mean_shap - lower_class_mean_shap)

print("Demographic parity difference:", dp_diff)


-------------------------------------------

import pandas as pd
import numpy as np
from sklearn.linear_model import LogisticRegression

class ModelFairness:
    
    def __init__(self, model, feature_cols, target_col, privileged_group):
        self.model = model
        self.feature_cols = feature_cols
        self.target_col = target_col
        self.privileged_group = privileged_group
    
    def _calculate_demographic_parity(self, df, group_col):
        """
        Calculate the demographic parity for a given group column
        """
        group_counts = df[group_col].value_counts()
        group_prob = group_counts / len(df)
        privileged_prob = df[df[self.privileged_group] == 1][self.target_col].mean()
        unprivileged_prob = df[df[self.privileged_group] == 0][self.target_col].mean()
        return np.abs(privileged_prob - unprivileged_prob) / group_prob[0]
    
    def calculate_fairness_metrics(self, df):
        """
        Calculate fairness metrics for a given dataframe
        """
        # Make predictions on the input data
        X = df[self.feature_cols]
        y = df[self.target_col]
        y_pred = self.model.predict(X)
        df['y_pred'] = y_pred
        
        # Calculate demographic parity for each group
        demographic_parity_dict = {}
        for group_col in [col for col in df.columns if col not in self.feature_cols + [self.target_col]]:
            demographic_parity_dict[group_col] = self._calculate_demographic_parity(df, group_col)
        
        return demographic_parity_dict


--------------------------------

# Generate mock dataset
n = 1000
X = pd.DataFrame({
    'Age': np.random.randint(18, 90, size=n),
    'SocioEconomicClass_Upper': np.random.choice([0, 1], size=n, p=[0.7, 0.3]),
    'SocioEconomicClass_Middle': np.random.choice([0, 1], size=n, p=[0.4, 0.6]),
    'SocioEconomicClass_Lower': np.random.choice([0, 1], size=n, p=[0.2, 0.8]),
})
y = np.random.choice([0, 1], size=n, p=[0.6, 0.4])

# Train logistic regression model
model = LogisticRegression(random_state=42)
model.fit(X, y)

# Create ModelFairness object
fairness = ModelFairness(model, ['Age', 'SocioEconomicClass_Upper', 'SocioEconomicClass_Middle', 'SocioEconomicClass_Lower'], 'y', 'SocioEconomicClass_Upper')

# Calculate fairness metrics for the dataset
fairness_metrics = fairness.calculate_fairness_metrics(X)

# Print out the demographic parity for each group
print(fairness_metrics)
-----------

{'SocioEconomicClass_Upper': 0.023845935511537337, 'SocioEconomicClass_Middle': 0.022574268496926888, 'SocioEconomicClass_Lower': 0.00753613311066083}

---

from setuptools import setup, find_packages

setup(
    name='model_fairness',
    version='0.1.0',
    author='Your Name',
    author_email='yourname@email.com',
    description='A Python library for evaluating model fairness.',
    long_description='''This library provides various functions and metrics for evaluating model fairness, including disparate impact, equal opportunity, and demographic parity. It also includes visualization tools for exploring fairness issues in model predictions.''',
    url='https://github.com/yourusername/model_fairness',
    packages=find_packages(),
    classifiers=[
        'Development Status :: 3 - Alpha',
        'Intended Audience :: Developers',
        'License :: OSI Approved :: MIT License',
        'Programming Language :: Python :: 3.6',
        'Programming Language :: Python :: 3.7',
        'Programming Language :: Python :: 3.8',
        'Programming Language :: Python :: 3.9',
    ],
    install_requires=[
        'numpy>=1.18.1',
        'pandas>=1.0.0',
        'scikit-learn>=0.22.2',
        'shap>=0.38.1',
    ],
    extras_require={
        'tests': [
            'pytest>=6.2.4',
        ],
    },
    python_requires='>=3.6',
)
